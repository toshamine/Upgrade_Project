{%  extends "Client/base.html.twig" %}
{% block title %}Add WhiteTest{% endblock %}


{%  block comment  %}<!--Menu just replace the parent with the link here and add the word "active" to the class= for the current page name-->
    <!-- <li class="nav-item active"><a href="" class="nav-link">Forum</a></li> -->{% endblock %}

{% block home %} {{ parent() }} {% endblock %}
{% block about %} {{ parent() }} {% endblock %}
{% block certifications %} {{ parent() }} {% endblock %}
{% block instructors %} {{ parent() }} {% endblock %}
{% block forum %}  {{ parent() }} {% endblock %}
{% block contact %} {{ parent() }} {% endblock %}


{%  block sectionname %} Question Details <div id="this"></div> {% endblock %}
{% block sectionmenu %} Question {% endblock %}

{% block contenu %}
    <center><h1  class="hvr-float-shadow unselectable">Question {{ question.id }}</h1></center>

    <table class="table table-hover">
        <tbody class="thead-dark">
            <tr>
                <th>Id</th>
                <td>{{ question.id }}</td>
            </tr>
            <tr>
                <th>Answer</th>
                <td>{{ question.Answer }}</td>
            </tr>
            <tr>
                <th>Question</th>
                <td>{{ question.Question }}</td>
            </tr>
            <tr>
                <th>Choice A</th>
                <td>{{ question.ChoiceA }}</td>
            </tr>
            <tr>
                <th>Choice B</th>
                <td>{{ question.ChoiceB }}</td>
            </tr>
            {% if question.ChoiceC!=null %}
            <tr>
                <th>Choice C</th>
                <td>{{ question.ChoiceC }}</td>
            </tr>
        {%endif  %}
            <tr>
                <th>WhiteTest</th>
                <td>{{ question.WhiteTest }}</td>
            </tr>
            <tr>
                    <th>Duration</th>
                <td>{{ question.Duration}} Min</td>
            </tr>
        </tbody>
    </table>

    <div class="svg-wrapper" style="float: left;">
        <svg height="40" width="150" xmlns="http://www.w3.org/2000/svg">
            <rect id="shape" height="40" width="150" />
            <div id="text" >
                &nbsp;<a href="{{ path('question_crud_index') }}"><span class="spot"></span><span style="color: #0b7dfd;">Back To List</span></a>
            </div>
        </svg>
    </div>

    <div class="svg-wrapper" style="float: right;">
            <svg height="40" width="150" xmlns="http://www.w3.org/2000/svg">
                <rect id="shape" height="40" width="150" />
                <div id="text" >
                    &nbsp;<a href="{{ path('question_crud_edit', {'id': question.id}) }}"><span class="spot"></span><span style="color: #0b7dfd;">Update</span></a>
                </div>
            </svg>
        </div>

    <center>
        <div class="svg-wrapper-red">
            <svg height="40" width="150" xmlns="http://www.w3.org/2000/svg">
                <rect id="shape-red" height="40" width="150" />
                <div id="text" >
                    &nbsp;<a href="#this" onclick="confdelete()"><span class="spot"></span><span style="color: black;">Delete</span></a>
                </div>
            </svg>
        </div>
    </center>



    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="sweetalert2.all.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function confdelete(){
            const swalWithBootstrapButtons = Swal.mixin({
                customClass: {
                    confirmButton: 'btn btn-success',
                    cancelButton: 'btn btn-danger'
                },
                buttonsStyling: false
            })

            swalWithBootstrapButtons.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes!',
                cancelButtonText: 'No!',
                reverseButtons: true
            }).then((result) => {
                if (result.isConfirmed) {
                    swalWithBootstrapButtons.fire(
                        'Deleted!',
                        'The Question Is Deleted',
                        'Success'
                    );
                    function sleep(ms) {
                        return new Promise(resolve => setTimeout(resolve, ms));
                    }
                    async function valid() {
                        await sleep(3000);
                        window.location.replace("{{ path('deleteqs', {'id': question.id}) }}");
                    }
                    valid();
                } else if (
                    /* Read more about handling dismissals below */
                    result.dismiss === Swal.DismissReason.cancel
                ) {
                    swalWithBootstrapButtons.fire(
                        'Cancelled',
                        'Be Sure Before Deleting Please :)'
                    )
                }
            });
        }
    </script>
    <style>
        /*       Just setting CSS for the page   */

        * {
            margin: 0;
            padding: 0;
        }

        html,
        css {
            width: 100%;
            height: 100%;
        }

        .position {
            margin-left: auto;
            margin-right: auto;
            text-align: center;
            margin-top: 15%;
        }

        #workarea {
            position: absolute;
            width: 100%;
            height: 100%;
            background-color: #1e1a3e;
            font-family: Raleway;
        }

        #personal {
            color:white;
            text-decoration:none;
            position:absolute;
            bottom:15px;
            right:2%;
        }
        /*    start code for the actual button:         */


        /*
            Spot is the span on the inside of the href that
            fills the parent and makes the hover and link work
            for the entire div
        */

        .spot {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
        }
        /*
            This is the outer svg wrapper that the SVG itself will
            fill. Multiple svg-wrapper classes can be put side by side.
        */

        .svg-wrapper {
            margin-top: 0;
            position: relative;
            width: 150px;
            /*make sure to use same height/width as in the html*/
            height: 40px;
            display: inline-block;
            border-radius: 3px;
            margin-left: 5px;
            margin-right: 5px
        }
        .svg-wrapper-red {
            margin-top: 0;
            position: relative;
            width: 150px;
            /*make sure to use same height/width as in the html*/
            height: 40px;
            display: inline-block;
            border-radius: 3px;
            margin-left: 5px;
            margin-right: 5px
        }
        .svg-wrapper-green {
            margin-top: 0;
            position: relative;
            width: 150px;
            /*make sure to use same height/width as in the html*/
            height: 40px;
            display: inline-block;
            border-radius: 3px;
            margin-left: 5px;
            margin-right: 5px
        }
        /*
          This is where we define the fill, color, thickness,
          and stroke pattern of the SVG when there is no hover.
          The dasharray and offset together define the line position
          under the words. Here's also where the transition speed is set.
        */

        #shape {
            stroke-width: 6px;
            fill: transparent;
            stroke: #009FFD;
            stroke-dasharray: 85 400;
            stroke-dashoffset: -220;
            transition: 1s all ease;
        }
        #shape-red {
            stroke-width: 6px;
            fill: transparent;
            stroke: darkred;
            stroke-dasharray: 85 400;
            stroke-dashoffset: -220;
            transition: 1s all ease;
        }
        #shape-green {
            stroke-width: 6px;
            fill: transparent;
            stroke: green;
            stroke-dasharray: 85 400;
            stroke-dashoffset: -220;
            transition: 1s all ease;
        }
        /*
            Pushing the text up into the SVG. Without this the
            text would be below the div's.
        */

        #text {
            margin-top: -35px;
            text-align: center;
        }

        #text a {
            color: white;
            text-decoration: none;
            font-weight: 100;
            font-size: 1.1em;
        }
        /*
            Changing the shape on hover. I change the color of the stroke,
        make it thinner, then set it to again wrap around the entire parent element.
        */

        .svg-wrapper:hover #shape {
            stroke-dasharray: 50 0;
            stroke-width: 3px;
            stroke-dashoffset: 0;
            stroke: #06D6A0;
        }
        .svg-wrapper-red:hover #shape-red {
            stroke-dasharray: 50 0;
            stroke-width: 3px;
            stroke-dashoffset: 0;
            stroke: red;
        }
        .svg-wrapper-green:hover #shape-green {
            stroke-dasharray: 50 0;
            stroke-width: 3px;
            stroke-dashoffset: 0;
            stroke: greenyellow;
        }
    </style>
    <style>
        .unselectable {
            -webkit-user-select: none;
            -webkit-touch-callout: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }
        .unclick{ text-decoration: none; cursor: default; }
    </style>

{% endblock %}
